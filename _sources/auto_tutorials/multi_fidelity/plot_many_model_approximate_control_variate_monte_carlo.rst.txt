
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/multi_fidelity/plot_many_model_approximate_control_variate_monte_carlo.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_multi_fidelity_plot_many_model_approximate_control_variate_monte_carlo.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_multi_fidelity_plot_many_model_approximate_control_variate_monte_carlo.py:


Generalized Approximate Control Variate Monte Carlo
===================================================
This tutorial builds upon :ref:`sphx_glr_auto_tutorials_multi_fidelity_plot_approximate_control_variate_monte_carlo.py`, :ref:`sphx_glr_auto_tutorials_multi_fidelity_plot_multi_level_monte_carlo.py`, and :ref:`sphx_glr_auto_tutorials_multi_fidelity_plot_multi_fidelity_monte_carlo.py`. MLMC and MFMC are two approaches which can utilize an esemble of models of vary cost and accuracy to efficiently estimate the expectation of the highest fidelity model. In this tutorial we introduce a general framework for ACVMC when using 2 or more mmodels. We show that MFMC are both instances of this framework and use the flexibility of the framework to derive new ACV estimators.

Control variate Monte Carlo can be easily extended and applied to more than two models. Consider :math:`M` lower fidelity models with sample ratios :math:`r_\alpha>=1`, for :math:`\alpha=1,\ldots,M`. The approximate control variate estimator of the mean of the high-fidelity model :math:`Q_0=\mean{f_0}` is

.. math::
   Q^{\text{ACV}} &= Q_{0,\mathcal{Z}_{0,1}} + \sum_{\alpha=1}^M \eta_\alpha \left( Q_{\alpha,\mathcal{Z}_{\alpha,1}} - \mu_{\alpha,\mathcal{Z}_{\alpha,2}} \right) =Q_{0,\mathcal{Z}_{0,1}} + \sum_{\alpha=1}^M \eta_\alpha \Delta_{\alpha,\mathcal{Z}_{\alpha,1},\mathcal{Z}_{\alpha,2}}\\&=Q_{0,N}+\V{\eta}\V{\Delta}

Here :math:`\V{\eta}=[\eta_1,\ldots,\eta_M]^T`, :math:`\V{\Delta}=[\Delta_1,\ldots,\Delta_M]^T`, and :math:`\mathcal{Z}_{\alpha,1}`, :math:`\mathcal{Z}_{\alpha,2}` are sample sets that may or may not be disjoint. Specifying the exact nature of these sets, including their cardinality, can be used to design different ACV estimators which will discuss later.

The variance of the ACV estimator is

.. math::

   \var{Q^{\text{ACV}}} = \var{Q_{0}}\left(1+\V{\eta}^T\frac{\covar{\V{\Delta}}{\V{\Delta}}}{\var{Q_0}}\V{\eta}+2\V{\eta}^T\frac{\covar{\V{\Delta}}{Q_0}}{\var{Q_0}}\right)

The control variate weights that produce the minimum variance are given by

.. math::

   \V{\eta} = -\covar{\V{\Delta}}{\V{\Delta}}^{-1}\covar{\V{\Delta}}{Q_0}

The resulting variance reduction is

.. math::

   \gamma =1-\covar{\V{\Delta}}{Q_0}^T\frac{\covar{\V{\Delta}}{\V{\Delta}}^{-1}}{\var{Q_0}}\covar{\V{\Delta}}{Q_0}

The previous formulae require evaluating covarices with the discrepancies :math:`\Delta`. To avoid this we write

.. math::

   \covar{\V{\Delta}}{Q_0}&=N^{-1}\left(\mathrm{diag}\left(F\right)\circ \covar{\V{Q}_\mathrm{LF}}{Q_0}\right)\\
   \covar{\V{\Delta}}{\V{\Delta}}&=N^{-1}\left(\covar{\V{Q}_\mathrm{LF}}{\V{Q}_\mathrm{LF}}\circ F \right)\\

where :math:`\V{Q}_\mathrm{LF}=[Q_1,\ldots,Q_M]^T` and :math:`\circ` is the Hadamard  (element-wise) product. The matrix :math:`F` is dependent on the sampling scheme used to generate the sets :math:`\mathcal{Z}_{\alpha,1}`, :math:`\mathcal{Z}_{\alpha,2}`. We discuss one useful sampling scheme found in [GGEJJCP2020]_ here.

MLMC and MFMC are Control Variate Estimators
--------------------------------------------
In the following we show that the MLMC and MFMC estimators are both Control Variate estimators and use this insight to derive additional properties of these estimators not discussed previously.

MLMC
^^^^
The three model MLMC estimator is

.. math:: Q_{0,\mathcal{Z}}^\mathrm{ML}=Q_{2,\hat{\mathcal{Z}_{2}}}+\left(Q_{1,\hat{\mathcal{Z}}_{1}}-Q_{2,\hat{\mathcal{Z}}_{1}}\right)+\left(Q_{0,\hat{\mathcal{Z}}_{0}}-Q_{1,\hat{\mathcal{Z}}_{0}}\right)

The MLMC estimator is a specific form of an ACV estimator.
By rearranging terms it is clear that this is just a control variate estimator

.. math::

    Q_{0,\mathcal{Z}}^\mathrm{ML}&=Q_{0,\hat{\mathcal{Z}}_{0}} - \left(Q_{1,\hat{\mathcal{Z}}_{0}}-Q_{1,\hat{\mathcal{Z}}_{1}}\right)-\left(Q_{2,\hat{\mathcal{Z}}_{1}}-Q_{2,\hat{\mathcal{Z}}_{2}}\right)\\
   &=Q_{0,\mathcal{Z}_{0}} - \left(Q_{1,\mathcal{Z}_{1,1}}-Q_{1,\mathcal{Z}_{1,2}}\right)-\left(Q_{2,\mathcal{Z}_{2,1}}-Q_{2,\mathcal{Z}_{2,2}}\right)

where in the last line we have used the general ACV notation for sample partitioning. The control variate weights in this case are just :math:`\eta_1=\eta_2=-1`.

By inductive reasoning we get the :math:`M` model ACV version of the MLMC estimator.

.. math:: Q_{0,\mathcal{Z}}^\mathrm{ML}=Q_{0,\mathcal{Z}_{0}} +\sum_{\alpha=1}^M\eta_\alpha\left(Q_{\alpha,\mathcal{Z}_{\alpha-1,1}}-\mu_{\alpha,\mathcal{Z}_{\alpha,2}}\right)

where :math:`\eta_\alpha=-1,\forall\alpha` and :math:`\mathcal{Z}_{\alpha,1}=\mathcal{Z}_{\alpha-1,2}`, and :math:`\mu_{\alpha,\mathcal{Z}_{\alpha,2}}=Q_{\alpha,\mathcal{Z}_{\alpha,2}}`.

TODO: Add the F matrix of the MLMC estimator

By viewing MLMC as a control variate we can derive its variance reduction [GGEJJCP2020]_

.. math::  \gamma+1 = - \eta_1^2 \tau_{1}^2 - 2 \eta_1 \rho_{1} \tau_{1} - \eta_M^2 \frac{\tau_{M}}{\hat{r}_{M}} - \sum_{i=2}^M \frac{1}{\hat{r}_{i-1}}\left( \eta_i^2 \tau_{i}^2 + \tau_{i-1}^2 \tau_{i-1}^2 - 2 \eta_i \eta_{i-1} \rho_{i,i-1} \tau_{i} \tau_{i-1} \right),
   :label: mlmc-variance-reduction

where  :math:`\tau_\alpha=\left(\frac{\var{Q_\alpha}}{\var{Q_0}}\right)^{\frac{1}{2}}`. Recall that and :math:`\hat{r}_\alpha=\lvert\mathcal{Z}_{\alpha,2}\rvert/N` is the ratio of the cardinality of the sets :math:`\mathcal{Z}_{\alpha,2}` and :math:`\mathcal{Z}_{0,2}`.

Now consider what happens to this variance reduction if we have unlimited resources to evaluate the low fidelity model. As $\hat{r}_\alpha\to\infty$, for $\alpha=1,\ldots,M$ we have

.. math::  \gamma+1 = - \eta_1^2 \tau_{1}^2 - 2 \eta_1 \rho_{1} \tau_{1}

From this expression it becomes clear that the variance reduction of a MLMC estimaor is bounded by the CVMC estimator (see :ref:`sphx_glr_auto_tutorials_multi_fidelity_plot_control_variate_monte_carlo.py`) using the lowest fidelity model with the highest correlation with :math:`f_0`.

MFMC
^^^^
Recall that the :math:`M` model MFMC estimator is given by

.. math:: Q_{0,\mathcal{Z}}^\mathrm{MF}=Q_{0,\mathcal{Z}_{0}} + \sum_{\alpha=1}^M\eta_\alpha\left(Q_{\alpha,\mathcal{Z}_{\alpha,1}}-\mu_{\alpha,\mathcal{Z}_{\alpha}}\right)

From this expression it is clear that MFMC is an approximate control variate estimator.

TODO: Add the F matrix of the MFMC estimator

For the optimal choice of the control variate weights the variance reduction of the estimator is

.. math:: \gamma = 1-\rho_1^2\left(\frac{r_1-1}{r_1}+\sum_{\alpha=2}^M \frac{r_\alpha-r_{\alpha-1}}{r_\alpha r_{\alpha-1}}\frac{\rho_\alpha^2}{\rho_1^2}\right)

From close ispection we see that, as with MLMC, when the variance reduction of the MFMC estimator estimator converges to that of the 2 model CVMC estimator that uses the low-fidelity model that has the highest correlation with the high-fidelity model.

In the following we will introduce a ACV estimator which does not suffer from this limitation. However, before doing so we wish to remark that this sub-optimality is when the the number of high-fidelity samples is fixed. If the sample allocation to all models can be optimized, as can be done for both MLMC and MFMC, this suboptimality may not always have an impact. We will investigate this futher later in this tutorial.

A New ACV Estimator
-------------------
As we have discussed MLMC and MFMC are ACV estimators, are suboptimal for a fixed number of high-fidelity samples.
In the following we detail a straightforward way to obtain an ACV estimator, which will call ACV-IS, that with enough resources can achieve the optimal variance reduction of CVMC when the low-fidelity means are known.

To obtain the ACV-IS estimator we first evaluate each model (including the high-fidelity model) at a set of :math:`N` samples  :math:`\mathcal{Z}_{\alpha,1}`. We then evaluate each low fidelity model at an additional :math:`N(1-r_\alpha)` samples :math:`\mathcal{Z}_{\alpha,2}`. That is the sample sets satisfy :math:`\mathcal{Z}_{\alpha,1}=\mathcal{Z}_{0}\;\forall\alpha>0` and :math:`\left(\mathcal{Z}_{\alpha,2}\setminus\mathcal{Z}_{\alpha,1}\right)\cap\left(\mathcal{Z}_{\kappa,2}\setminus\mathcal{Z}_{\kappa,1}\right)=\emptyset\;\forall\kappa\neq\alpha`. See :ref:`acv-is-sample-allocation-mlmc-comparison` for a comparison of the sample sets used by ACV-IS and MLMC.

.. list-table::

   * -
       .. _mlmc-sample-allocation:

       .. figure:: ../../figures/mlmc.png
          :width: 100%
          :align: center

          MLMC sampling strategy

     -
       .. _acv-is-sample-allocation-mlmc-comparison:

       .. figure:: ../../figures/acv_is.png
          :width: 100%
          :align: center

          ACV IS sampling strategy

The matrix :math:`F` corresponding to this sample scheme is

.. math::

   F_{ij}=\begin{cases}\frac{r_i-1}{r_i}\frac{r_j-1}{r_j} & i\neq j\\
   \frac{r_i-1}{r_i} & i=j
   \end{cases}

.. GENERATED FROM PYTHON SOURCE LINES 135-136

Lets apply ACV to the tunable model ensemble

.. GENERATED FROM PYTHON SOURCE LINES 136-152

.. code-block:: default

    import numpy as np
    import matplotlib.pyplot as plt
    from functools import partial

    from pyapprox.benchmarks import setup_benchmark
    from pyapprox import interface
    from pyapprox import multifidelity

    np.random.seed(2)
    shifts = [.1, .2]
    benchmark = setup_benchmark(
        "tunable_model_ensemble", theta1=np.pi/2*.95, shifts=shifts)
    model = benchmark.fun
    model_costs = 10.**(-np.arange(3))
    cov = model.get_covariance_matrix()








.. GENERATED FROM PYTHON SOURCE LINES 153-154

First let us just use 2 models

.. GENERATED FROM PYTHON SOURCE LINES 154-172

.. code-block:: default


    print('Two models')
    model_ensemble = interface.ModelEnsemble(model.models[:2])
    nhf_samples = 10
    ntrials = 1000
    nsample_ratios = np.array([10])
    nsamples_per_model = np.hstack((1, nsample_ratios))*nhf_samples
    target_cost = np.dot(model_costs[:2], nsamples_per_model)
    est = multifidelity.get_estimator(
        "acvis", benchmark.model_covariance[:2, :2], model_costs[:2],
        benchmark.variable)
    means, numerical_var, true_var = \
        multifidelity.estimate_variance(
            model_ensemble, est, target_cost, ntrials, nsample_ratios)

    print("Theoretical ACV variance", true_var)
    print("Achieved ACV variance", numerical_var)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Two models
    Theoretical ACV variance 0.014971109874541333
    Achieved ACV variance 0.01617124648499629




.. GENERATED FROM PYTHON SOURCE LINES 173-174

Now let us use 3 models

.. GENERATED FROM PYTHON SOURCE LINES 174-191

.. code-block:: default

    model_ensemble = interface.ModelEnsemble(model.models[:3])
    nhf_samples = 10
    ntrials = 1000
    nsample_ratios = np.array([10, 10])
    nsamples_per_model = np.hstack((1, nsample_ratios))*nhf_samples
    target_cost = np.dot(model_costs[:3], nsamples_per_model)
    est = multifidelity.get_estimator(
        "acvis", benchmark.model_covariance[:3, :3], model_costs[:3],
        benchmark.variable)
    means, numerical_var, true_var = \
        multifidelity.estimate_variance(
            model_ensemble, est, target_cost, ntrials, nsample_ratios)

    print('Three models')
    print("Theoretical ACV variance reduction", true_var)
    print("Achieved ACV variance reduction", numerical_var)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Three models
    Theoretical ACV variance reduction 0.01475028073510588
    Achieved ACV variance reduction 0.014882794078588198




.. GENERATED FROM PYTHON SOURCE LINES 192-193

The benefit of using three models over two models depends on the correlation between each low fidelity model and the high-fidelity model. The benefit on using more models also depends on the relative cost of evaluating each model, however here we will just investigate the effect of changing correlation. The following code shows the variance reduction (relative to standard Monte Carlo) obtained using CVMC (not approximate CVMC) using 2 (OCV1) and three models (OCV2). Unlike MLMC and MFMC, ACV-IS will achieve these variance reductions in the limit as the number of samples of the low fidelity models goes to infinity.

.. GENERATED FROM PYTHON SOURCE LINES 193-227

.. code-block:: default


    from pyapprox.multifidelity.control_variate_monte_carlo import (
        get_control_variate_rsquared
    )
    theta1 = np.linspace(model.theta2*1.05, model.theta0*0.95, 5)
    covs = []
    var_reds = []
    for th1 in theta1:
        model.theta1 = th1
        covs.append(model.get_covariance_matrix())
        OCV2_var_red = 1-get_control_variate_rsquared(covs[-1])
        # use model with largest covariance with high fidelity model
        idx = [0, np.argmax(covs[-1][0, 1:])+1]
        assert idx == [0, 1] #it will always be the first model
        OCV1_var_red = get_control_variate_rsquared(covs[-1][np.ix_(idx, idx)])
        var_reds.append([OCV2_var_red, OCV1_var_red])
    covs = np.array(covs)
    var_reds = np.array(var_reds)

    fig, axs = plt.subplots(1, 2, figsize=(2*8, 6))
    for ii, jj in [[0, 1], [0, 2], [1, 2]]:
        axs[0].plot(theta1, covs[:, ii, jj], 'o-',
                    label=r'$\rho_{%d%d}$' % (ii, jj))
    axs[1].plot(theta1, var_reds[:, 0], 'o-', label=r'$\mathrm{OCV2}$')
    axs[1].plot(theta1, var_reds[:, 1], 'o-', label=r'$\mathrm{OCV1}$')
    axs[1].plot(theta1, var_reds[:, 0]/var_reds[:, 1], 'o-',
                label=r'$\mathrm{OCV2/OCV1}$')
    axs[0].set_xlabel(r'$\theta_1$')
    axs[0].set_ylabel(r'$\mathrm{Correlation}$')
    axs[1].set_xlabel(r'$\theta_1$')
    axs[1].set_ylabel(r'$\mathrm{Variance\;reduction\;ratio} \; \gamma$')
    axs[0].legend()
    _ = axs[1].legend()




.. image-sg:: /auto_tutorials/multi_fidelity/images/sphx_glr_plot_many_model_approximate_control_variate_monte_carlo_001.png
   :alt: plot many model approximate control variate monte carlo
   :srcset: /auto_tutorials/multi_fidelity/images/sphx_glr_plot_many_model_approximate_control_variate_monte_carlo_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 228-235

The variance reduction clearly depends on the correlation between all the models.

Let us now compare the variance reduction obtained by MLMC, MFMC and ACV with the MF sampling scheme as we increase the number of samples assigned to the low-fidelity models, while keeping the number of high-fidelity samples fixed. Here we will use the model ensemble

.. math:: f_\alpha(\rv)=\rv^{5-\alpha}, \quad \alpha=0,\ldots,4

where each model is the function of a single uniform random variable defined on the unit interval :math:`[0,1]`.

.. GENERATED FROM PYTHON SOURCE LINES 235-277

.. code-block:: default


    plt.figure()
    benchmark = setup_benchmark("polynomial_ensemble")
    poly_model = benchmark.fun
    cov = poly_model.get_covariance_matrix()
    model_costs = np.asarray([10**-ii for ii in range(cov.shape[0])])
    nhf_samples = 10
    nsample_ratios_base = np.array([2, 4, 8, 16])
    cv_labels = [r'$\mathrm{OCV-1}$', r'$\mathrm{OCV-2}$', r'$\mathrm{OCV-4}$']
    cv_rsquared_funcs = [
        lambda cov: get_control_variate_rsquared(cov[:2, :2]),
        lambda cov: get_control_variate_rsquared(cov[:3, :3]),
        lambda cov: get_control_variate_rsquared(cov)]
    cv_gammas = [1-f(cov) for f in cv_rsquared_funcs]
    for ii in range(len(cv_gammas)):
        plt.axhline(y=cv_gammas[ii], linestyle='--', c='k')
        xloc = -.35
        plt.text(xloc, cv_gammas[ii]*1.1, cv_labels[ii], fontsize=16)
    plt.axhline(y=1, linestyle='--', c='k')
    plt.text(xloc, 1, r'$\mathrm{MC}$', fontsize=16)

    from pyapprox.util.configure_plots import mathrm_labels
    acv_labels = mathrm_labels(["MLMC", "MFMC", "ACVMF"])
    estimators = [
        multifidelity.get_estimator("mlmc", cov, model_costs, poly_model.variable),
        multifidelity.get_estimator("mfmc", cov, model_costs, poly_model.variable),
        multifidelity.get_estimator("acvmf", cov, model_costs, poly_model.variable)
    ]
    acv_rsquared_funcs = [est._get_rsquared for est in estimators]

    nplot_points = 20
    acv_gammas = np.empty((nplot_points, len(acv_rsquared_funcs)))
    for ii in range(nplot_points):
        nsample_ratios = np.array([r*(2**ii) for r in nsample_ratios_base])
        acv_gammas[ii, :] = [1-f(cov, nsample_ratios) for f in acv_rsquared_funcs]
    for ii in range(len(acv_labels)):
        plt.semilogy(np.arange(nplot_points), acv_gammas[:, ii],
                     label=acv_labels[ii])
    plt.legend()
    plt.xlabel(r'$\log_2(r_i)-i$')
    _ = plt.ylabel(r'$\mathrm{Variance}$ $\mathrm{reduction}$ $\mathrm{ratio}$ $\gamma$')




.. image-sg:: /auto_tutorials/multi_fidelity/images/sphx_glr_plot_many_model_approximate_control_variate_monte_carlo_002.png
   :alt: plot many model approximate control variate monte carlo
   :srcset: /auto_tutorials/multi_fidelity/images/sphx_glr_plot_many_model_approximate_control_variate_monte_carlo_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 278-279

As the theory suggests MLMC and MFMC use multiple models to increase the speed to which we converge to the optimal 2 model CV estimator OCV-2. These two approaches reduce the variance of the estimator more quickly than the ACV estimator, but cannot obtain the optimal variance reduction.

.. GENERATED FROM PYTHON SOURCE LINES 281-288

Accelerated Approximate Control Variate Monte Carlo
---------------------------------------------------
The recursive estimators work well when the number of low-fidelity samples are smal but ACV can achieve a greater variance reduction for a fixed number of high-fidelity samples. In this section we present an approach called ACV-GMFB that combines the strengths of these methods [BLWLJCP2022]_.

This estimator differs from the previous recursive estimators because it uses some models as control variates and other models to estimate the mean of these control variates recursively. This estimator optimizes over the best use of models and returns the best model configuration.

Let us add the ACV-GMFB estimator to the previous plot

.. GENERATED FROM PYTHON SOURCE LINES 288-334

.. code-block:: default



    plt.figure()
    cv_labels = [r'$\mathrm{OCV-1}$', r'$\mathrm{OCV-2}$', r'$\mathrm{OCV-4}$']
    cv_rsquared_funcs = [
        lambda cov: get_control_variate_rsquared(cov[:2, :2]),
        lambda cov: get_control_variate_rsquared(cov[:3, :3]),
        lambda cov: get_control_variate_rsquared(cov)]
    cv_gammas = [1-f(cov) for f in cv_rsquared_funcs]
    xloc = -.35
    for ii in range(len(cv_gammas)):
        plt.axhline(y=cv_gammas[ii], linestyle='--', c='k')
        plt.text(xloc, cv_gammas[ii]*1.1, cv_labels[ii], fontsize=16)
    plt.axhline(y=1, linestyle='--', c='k')
    plt.text(xloc, 1, r'$\mathrm{MC}$', fontsize=16)

    from pyapprox.multifidelity.monte_carlo_estimators import (
        get_acv_recursion_indices
    )
    acv_labels = mathrm_labels(["MLMC", "MFMC", "ACVMF", "ACVGMFB"])
    estimator_types = ["mlmc", "mfmc", "acvmf", "acvgmfb"]
    estimators = [
        multifidelity.get_estimator(t, cov, model_costs, poly_model.variable)
        for t in estimator_types]
    # acvgmf requires total cost so create wrappers of methods that do not
    nplot_points = 20
    acv_gammas = np.empty((nplot_points, len(estimators)))
    for ii in range(nplot_points):
        nsample_ratios = np.array([r*(2**ii) for r in nsample_ratios_base])
        target_cost = nhf_samples*model_costs[0]+nsample_ratios.dot(
            model_costs[1:])*nhf_samples
        acv_gammas[ii, :-1] = [1-est._get_rsquared(cov, nsample_ratios)
                               for est in estimators[:-1]]
        best_rsq = -np.inf
        for index in get_acv_recursion_indices(cov.shape[0]):
            estimators[-1].set_recursion_index(index)
            rsq = estimators[-1]._get_rsquared(cov, nsample_ratios, target_cost)
            best_rsq = max(best_rsq, rsq)
        acv_gammas[ii, -1] = 1-best_rsq
    for ii in range(len(acv_labels)):
        plt.semilogy(np.arange(nplot_points), acv_gammas[:, ii],
                     label=acv_labels[ii])
    plt.legend()
    plt.xlabel(r'$\log_2(r_i)-i$')
    _ = plt.ylabel(r'$\mathrm{Variance}$ $\mathrm{reduction}$ $\mathrm{ratio}$ $\gamma$')




.. image-sg:: /auto_tutorials/multi_fidelity/images/sphx_glr_plot_many_model_approximate_control_variate_monte_carlo_003.png
   :alt: plot many model approximate control variate monte carlo
   :srcset: /auto_tutorials/multi_fidelity/images/sphx_glr_plot_many_model_approximate_control_variate_monte_carlo_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 335-338

The variance of the best ACV-GMFB still converges to the lowest possible variance. But its variance at small sample sizes is better than ACV-MF  and comparable to MLMC.

TODO Make note about how this scheme is useful when one model may have multiple discretizations.!!!!

.. GENERATED FROM PYTHON SOURCE LINES 340-344

Optimal Sample Allocation
-------------------------

The previous results compared MLMC with MFMC and ACV-MF when the number of high-fidelity samples were fixed. In the following we compare these methods when the number of samples are optimized to minimize the variance of each estimator. We will only use the first 4 models

.. GENERATED FROM PYTHON SOURCE LINES 344-362

.. code-block:: default

    from pyapprox.util.configure_plots import mathrm_labels, mathrm_label
    estimator_types = ["mc", "mlmc", "mfmc", "acvmf", "acvgmfb"]
    estimators = [
        multifidelity.get_estimator(t, cov[:4, :4], model_costs[:4], poly_model.variable)
        for t in estimator_types]
    est_labels = mathrm_labels(["MC", "MLMC", "MFMC", "ACVMF", "ACVGMFB"])
    target_costs = np.array([1e1, 1e2, 1e3, 1e4], dtype=int)
    optimized_estimators = multifidelity.compare_estimator_variances(
        target_costs, estimators)

    fig, ax = plt.subplots(1, 1, figsize=(8, 6))
    multifidelity.plot_estimator_variances(
        optimized_estimators, est_labels, ax,
        ylabel=mathrm_label("Relative Estimator Variance"))
    ax.set_xlim(target_costs.min(), target_costs.max())
    plt.show()
    #fig # necessary for jupyter notebook to reshow plot in new cell




.. image-sg:: /auto_tutorials/multi_fidelity/images/sphx_glr_plot_many_model_approximate_control_variate_monte_carlo_004.png
   :alt: plot many model approximate control variate monte carlo
   :srcset: /auto_tutorials/multi_fidelity/images/sphx_glr_plot_many_model_approximate_control_variate_monte_carlo_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [  5.018805    20.86309658 344.80092828] nsample_ratios
    [   4   24  101 1677] nsf1
    [   4   24  101 1677] nsf2
    [  6.    25.25 419.25] rounded nsample_ratios
    [  5.018805    20.86309658 344.80092828] nsample_ratios
    [   48   244  1015 16776] nsf1
    [   48   244  1015 16776] nsf2
    [  5.08333333  21.14583333 349.5       ] rounded nsample_ratios
    [  5.018805    20.86309658 344.80092828] nsample_ratios
    [   486   2441  10150 167760] nsf1
    [   486   2441  10150 167760] nsf2
    [  5.02263374  20.88477366 345.18518519] rounded nsample_ratios
    [  5.018805    20.86309658 344.80092828] nsample_ratios
    [   4865   24418  101508 1677608] nsf1
    [   4865   24418  101508 1677608] nsf2
    [  5.01911614  20.86495375 344.83206578] rounded nsample_ratios
    [  6.275565    30.20633774 293.15098499] nsample_ratios
    [   4   28  135 1318] nsf1
    [   4   28  135 1318] nsf2
    [  7.    33.75 329.5 ] rounded nsample_ratios
    [  6.275565    30.20633774 293.15098499] nsample_ratios
    [   44   282  1358 13188] nsf1
    [   44   282  1358 13188] nsf2
    [  6.40909091  30.86363636 299.72727273] rounded nsample_ratios
    [  6.275565    30.20633774 293.15098499] nsample_ratios
    [   449   2823  13589 131885] nsf1
    [   449   2823  13589 131885] nsf2
    [  6.28730512  30.26503341 293.73051225] rounded nsample_ratios
    [  6.275565    30.20633774 293.15098499] nsample_ratios
    [   4498   28233  135894 1318853] nsf1
    [   4498   28233  135894 1318853] nsf2
    [  6.27678968  30.21209426 293.20875945] rounded nsample_ratios
    [  1.24402295 119.62065466 119.62065465] nsample_ratios
    [  4   5 490 490] nsf1
    [  4   5 490 490] nsf2
    [  1.25 122.5  122.5 ] rounded nsample_ratios
    [  1.02417868 119.58635426 119.58635425] nsample_ratios
    [  41   42 4945 4945] nsf1
    [  41   42 4945 4945] nsf2
    [  1.02439024 120.6097561  120.6097561 ] rounded nsample_ratios
    [  1.00241565 119.58294864 119.58294861] nsample_ratios
    [  413   414 49503 49503] nsf1
    [  413   414 49503 49503] nsf2
    [  1.00242131 119.86198547 119.86198547] rounded nsample_ratios
    [  1.00024154 119.58371263 119.58371262] nsample_ratios
    [  4140   4141 495079 495079] nsf1
    [  4140   4141 495079 495079] nsf2
    [  1.00024155 119.58429952 119.58429952] rounded nsample_ratios
    [12.74019339  1.4579656   1.2289828 ] nsample_ratios
    [ 4 55  6  5] nsf1
    [ 4 55  6  5] nsf2
    [13.75  1.5   1.25] rounded nsample_ratios
    [ 2.92769751 45.48574143  1.1748802 ] nsample_ratios
    [  5  16 260   6] nsf1
    [  5  16 260   6] nsf2
    [ 3.2 52.   1.2] rounded nsample_ratios
    [ 1.30272684 38.22101697  1.15136342] nsample_ratios
    [  6   8 252   7] nsf1
    [  6   8 252   7] nsf2
    [ 1.33333333 42.          1.16666667] rounded nsample_ratios
    [14.24332744  1.24382587  1.48765173] nsample_ratios
    [ 4 58  5  6] nsf1
    [ 4 58  5  6] nsf2
    [14.5   1.25  1.5 ] rounded nsample_ratios
    [  7.74953296   1.19857099 198.77092759] nsample_ratios
    [   5   39    6 1001] nsf1
    [   5   39    6 1001] nsf2
    [  7.8   1.2 200.2] rounded nsample_ratios
    [  4.2380824    4.07843148 131.91655969] nsample_ratios
    [  6  26  25 826] nsf1
    [  6  26  25 826] nsf2
    [  4.33333333   4.16666667 137.66666667] rounded nsample_ratios
    [ 1.24378157  1.12189079 83.31080144] nsample_ratios
    [  8  10   9 683] nsf1
    [  8  10   9 683] nsf2
    [ 1.25   1.125 85.375] rounded nsample_ratios
    [ 1.31910822 46.24707226  1.15955411] nsample_ratios
    [  6   8 289   7] nsf1
    [  6   8 289   7] nsf2
    [ 1.33333333 48.16666667  1.16666667] rounded nsample_ratios
    [ 6.76009542 97.49960072  7.02589856] nsample_ratios
    [  3  25 366  26] nsf1
    [  3  25 366  26] nsf2
    [  8.33333333 122.           8.66666667] rounded nsample_ratios
    [  6.2755851   30.20664427 293.15205936] nsample_ratios
    [   4   28  135 1318] nsf1
    [   4   28  135 1318] nsf2
    [  7.    33.75 329.5 ] rounded nsample_ratios
    [ 10.89015283  11.13950893 293.15064163] nsample_ratios
    [   4   43   44 1175] nsf1
    [   4   43   44 1175] nsf2
    [ 10.75  11.   293.75] rounded nsample_ratios
    [ 13.85453772 247.79320818 247.79320724] nsample_ratios
    [  1  27 484 484] nsf1
    [  1  27 484 484] nsf2
    [ 27. 484. 484.] rounded nsample_ratios
    [ 18.37912916 260.00046726  18.37912916] nsample_ratios
    [  1  33 476  33] nsf1
    [  1  33 476  33] nsf2
    [ 33. 476.  33.] rounded nsample_ratios
    [  50.79469018   50.79469018 1319.18637139] nsample_ratios
    [   1   64   64 1668] nsf1
    [   1   64   64 1668] nsf2
    [  64.   64. 1668.] rounded nsample_ratios
    [  1.1395474   14.28593082 138.65993894] nsample_ratios
    [  7   8 102 993] nsf1
    [  7   8 102 993] nsf2
    [  1.14285714  14.57142857 141.85714286] rounded nsample_ratios
    [  1.24402295 119.62065482 119.62065482] nsample_ratios
    [  4   5 490 490] nsf1
    [  4   5 490 490] nsf2
    [  1.25 122.5  122.5 ] rounded nsample_ratios
    [22.22286791  1.06467932  1.03233966] nsample_ratios
    [ 30 687  32  31] nsf1
    [ 30 687  32  31] nsf2
    [22.9         1.06666667  1.03333333] rounded nsample_ratios
    [ 5.00221234 77.71629764  1.02278407] nsample_ratios
    [  43  219 3410   44] nsf1
    [  43  219 3410   44] nsf2
    [ 5.09302326 79.30232558  1.02325581] rounded nsample_ratios
    [ 1.03104411 44.80855577  1.01552205] nsample_ratios
    [  64   66 2886   65] nsf1
    [  64   66 2886   65] nsf2
    [ 1.03125  45.09375   1.015625] rounded nsample_ratios
    <function acv_sample_allocation_nhf_samples_constraint at 0x144c92b80> 29.69160634192939
    <function acv_sample_allocation_gmf_ratio_constraint at 0x144c92940> 655.8962535637118
    <function acv_sample_allocation_gmf_ratio_constraint at 0x144c92940> -3.609166299156641e-10
    <function acv_sample_allocation_nlf_gt_nhf_ratio_constraint at 0x144c92a60> 657.8962535433664
    <function acv_sample_allocation_nlf_gt_nhf_ratio_constraint at 0x144c92a60> -1.9984518928595207e-08
    <function acv_sample_allocation_nlf_gt_nhf_ratio_constraint at 0x144c92a60> 0.9999999796545644
    [ 10.58266426   1.0233994  271.43962024] nsample_ratios
    [   42   452    43 11600] nsf1
    [   42   452    43 11600] nsf2
    [ 10.76190476   1.02380952 276.19047619] rounded nsample_ratios
    [  4.11225363   4.09641256 131.91778866] nsample_ratios
    [  63  259  258 8327] nsf1
    [  63  259  258 8327] nsf2
    [  4.11111111   4.0952381  132.17460317] rounded nsample_ratios
    [48.014618    1.05860062 48.01461781] nsample_ratios
    [ 17 819  18 819] nsf1
    [ 17 819  18 819] nsf2
    [48.17647059  1.05882353 48.17647059] rounded nsample_ratios
    [37.75713013  6.32454294  6.32454294] nsample_ratios
    [ 20 779 130 130] nsf1
    [ 20 779 130 130] nsf2
    [38.95  6.5   6.5 ] rounded nsample_ratios
    [ 6.30370991 97.50019907  6.32982693] nsample_ratios
    [  38  241 3733  242] nsf1
    [  38  241 3733  242] nsf2
    [ 6.34210526 98.23684211  6.36842105] rounded nsample_ratios
    [  6.27559934  30.20662581 293.15159838] nsample_ratios
    [   44   282  1358 13188] nsf1
    [   44   282  1358 13188] nsf2
    [  6.40909091  30.86363636 299.72727273] rounded nsample_ratios
    [ 10.8965327   10.9214529  293.15144296] nsample_ratios
    [   40   437   438 11763] nsf1
    [   40   437   438 11763] nsf2
    [ 10.925  10.95  294.075] rounded nsample_ratios
    [ 13.54485977 244.65606489 244.65606358] nsample_ratios
    [  19  268 4848 4848] nsf1
    [  19  268 4848 4848] nsf2
    [ 14.10526316 255.15789474 255.15789474] rounded nsample_ratios
    [ 18.38079508 259.98492969  18.38079508] nsample_ratios
    [  18  336 4764  336] nsf1
    [  18  336 4764  336] nsf2
    [ 18.66666667 264.66666667  18.66666667] rounded nsample_ratios
    [  50.79059305   50.79059304 1319.17952917] nsample_ratios
    [   12   642   642 16685] nsf1
    [   12   642   642 16685] nsf2
    [  53.5          53.5        1390.41666667] rounded nsample_ratios
    [  1.0138236   14.25914654 138.38614938] nsample_ratios
    [   72    73  1031 10010] nsf1
    [   72    73  1031 10010] nsf2
    [  1.01388889  14.31944444 139.02777778] rounded nsample_ratios
    [  1.02417868 119.58635485 119.58635484] nsample_ratios
    [  41   42 4945 4945] nsf1
    [  41   42 4945 4945] nsf2
    [  1.02439024 120.6097561  120.6097561 ] rounded nsample_ratios
    [29.70612698  1.00796339  1.0039817 ] nsample_ratios
    [ 251 7460  253  252] nsf1
    [ 251 7460  253  252] nsf2
    [29.72111554  1.00796813  1.00398406] rounded nsample_ratios
    [ 6.07791725 94.39564524  1.00255275] nsample_ratios
    [  391  2380 36978   392] nsf1
    [  391  2380 36978   392] nsf2
    [ 6.08695652 94.57289003  1.00255754] rounded nsample_ratios
    [ 1.00312076 45.90672805  1.00156038] nsample_ratios
    [  640   642 29420   641] nsf1
    [  640   642 29420   641] nsf2
    [ 1.003125  45.96875    1.0015625] rounded nsample_ratios
    runtime: acv weights failed
    runtime: acv weights failed
    runtime: acv weights failed
    runtime: acv weights failed
    runtime: acv weights failed
    runtime: acv weights failed
    [29.72031529  1.00398308  1.00796616] nsample_ratios
    [ 251 7461  252  253] nsf1
    [ 251 7461  252  253] nsf2
    [29.7250996   1.00398406  1.00796813] rounded nsample_ratios
    [ 11.37772967   1.00243963 291.83242905] nsample_ratios
    [   409   4663    410 119621] nsf1
    [   409   4663    410 119621] nsf2
    [ 11.400978     1.00244499 292.47188264] rounded nsample_ratios
    [  4.09977179   4.09818891 131.91779423] nsample_ratios
    [  631  2590  2589 83340] nsf1
    [  631  2590  2589 83340] nsf2
    [  4.10459588   4.10301109 132.07606973] rounded nsample_ratios
    [73.08899194  1.00839207 73.08899184] nsample_ratios
    [ 119 8709  120 8709] nsf1
    [ 119 8709  120 8709] nsf2
    [73.18487395  1.00840336 73.18487395] rounded nsample_ratios
    [37.75721264  6.32458388  6.32458388] nsample_ratios
    [ 206 7792 1305 1305] nsf1
    [ 206 7792 1305 1305] nsf2
    [37.82524272  6.33495146  6.33495146] rounded nsample_ratios
    [ 6.25044633 97.49959464  6.25305263] nsample_ratios
    [  383  2398 37409  2399] nsf1
    [  383  2398 37409  2399] nsf2
    [ 6.26109661 97.67362924  6.26370757] rounded nsample_ratios
    [  6.2755984   30.20664088 293.15164243] nsample_ratios
    [   449   2823  13589 131885] nsf1
    [   449   2823  13589 131885] nsf2
    [  6.28730512  30.26503341 293.73051225] rounded nsample_ratios
    [ 10.89714027  10.89963213 293.15239536] nsample_ratios
    [   401   4373   4374 117643] nsf1
    [   401   4373   4374 117643] nsf2
    [ 10.90523691  10.90773067 293.37406484] rounded nsample_ratios
    [ 13.63580015 246.74859005 246.74858952] nsample_ratios
    [  196  2685 48593 48593] nsf1
    [  196  2685 48593 48593] nsf2
    [ 13.69897959 247.92346939 247.92346939] rounded nsample_ratios
    [ 18.37904048 259.99890986  18.37904048] nsample_ratios
    [  183  3368 47651  3368] nsf1
    [  183  3368 47651  3368] nsf2
    [ 18.40437158 260.38797814  18.40437158] rounded nsample_ratios
    [  50.79060826   50.79060826 1319.1784867 ] nsample_ratios
    [   126   6424   6424 166854] nsf1
    [   126   6424   6424 166854] nsf2
    [  50.98412698   50.98412698 1324.23809524] rounded nsample_ratios
    [  1.00138106  14.2564168  138.3595157 ] nsample_ratios
    [   724    725  10322 100183] nsf1
    [   724    725  10322 100183] nsf2
    [  1.00138122  14.25690608 138.37430939] rounded nsample_ratios
    [  1.00241565 119.58294865 119.58294861] nsample_ratios
    [  413   414 49503 49503] nsf1
    [  413   414 49503 49503] nsf2
    [  1.00242131 119.86198547 119.86198547] rounded nsample_ratios
    [31.40906545  1.00083038  1.00041519] nsample_ratios
    [ 2408 75649  2410  2409] nsf1
    [ 2408 75649  2410  2409] nsf2
    [31.41569767  1.00083056  1.00041528] rounded nsample_ratios
    [ 6.25827121 97.21401435  1.0002599 ] nsample_ratios
    [  3847  24079 374048   3848] nsf1
    [  3847  24079 374048   3848] nsf2
    [ 6.25916298 97.23108916  1.00025994] rounded nsample_ratios
    [103.94417738 103.94255101   1.00124348] nsample_ratios
    [  804 83591 83589   805] nsf1
    [  804 83591 83589   805] nsf2
    [103.96890547 103.96641791   1.00124378] rounded nsample_ratios
    [31.41574612  1.00041526  1.00083052] nsample_ratios
    [ 2408 75653  2409  2410] nsf1
    [ 2408 75653  2409  2410] nsf2
    [31.4173588   1.00041528  1.00083056] rounded nsample_ratios
    [ 11.4750728    1.00024518 294.32975076] nsample_ratios
    [   4078   46801    4079 1200444] nsf1
    [   4078   46801    4079 1200444] nsf2
    [ 11.47645905   1.00024522 294.37076999] rounded nsample_ratios
    [  4.09852457   4.09836629 131.91779366] nsample_ratios
    [  6318  25894  25893 833470] nsf1
    [  6318  25894  25893 833470] nsf2
    [  4.09844888   4.0982906  131.91991136] rounded nsample_ratios
    [81.81391265  1.00092732 81.81391258] nsample_ratios
    [ 1078 88226  1079 88226] nsf1
    [ 1078 88226  1079 88226] nsf2
    [81.84230056  1.00092764 81.84230056] rounded nsample_ratios
    [92.79403606 92.79403604  1.00112083] nsample_ratios
    [  892 82790 82790   893] nsf1
    [  892 82790 82790   893] nsf2
    [92.81390135 92.81390135  1.00112108] rounded nsample_ratios
    [ 6.24500712 97.49945007  6.2452677 ] nsample_ratios
    [  3837  23966 374171  23967] nsf1
    [  3837  23966 374171  23967] nsf2
    [ 6.24602554 97.51654939  6.24628616] rounded nsample_ratios
    [  6.27559817  30.20664214 293.15164461] nsample_ratios
    [   4498   28233  135895 1318852] nsf1
    [   4498   28233  135895 1318852] nsf2
    [  6.27678968  30.21231659 293.20853713] rounded nsample_ratios
    [ 10.89724153  10.89749071 293.15102224] nsample_ratios
    [   4013   43731   43732 1176439] nsf1
    [   4013   43731   43732 1176439] nsf2
    [ 10.89733367  10.89758286 293.15698978] rounded nsample_ratios
    [ 13.63440303 246.71562678 246.71562318] nsample_ratios
    [  1969  26853 485917 485917] nsf1
    [  1969  26853 485917 485917] nsf2
    [ 13.63788725 246.78364652 246.78364652] rounded nsample_ratios
    [ 18.37913462 260.00024138  18.37913462] nsample_ratios
    [  1832  33684 476514  33684] nsf1
    [  1832  33684 476514  33684] nsf2
    [ 18.38646288 260.1058952   18.38646288] rounded nsample_ratios
    [  50.79064635   50.79064635 1319.17964777] nsample_ratios
    [   1264   64241   64241 1668548] nsf1
    [   1264   64241   64241 1668548] nsf2
    [  50.82357595   50.82357595 1320.05379747] rounded nsample_ratios
    [  1.00013809  14.25613117 138.35680747] nsample_ratios
    [   7241    7242  103235 1001908] nsf1
    [   7241    7242  103235 1001908] nsf2
    [  1.0001381   14.2570087  138.36597155] rounded nsample_ratios
    [  1.00024154 119.58371263 119.58371262] nsample_ratios
    [  4140   4141 495079 495079] nsf1
    [  4140   4141 495079 495079] nsf2
    [  1.00024155 119.58429952 119.58429952] rounded nsample_ratios




.. GENERATED FROM PYTHON SOURCE LINES 363-364

In this example ACVGMFB is the most efficient estimator, i.e. it has a smaller variance for a fixed cost. However this improvement is problem dependent. For other model ensembles another estimator may be more efficient. Modify the above example to use another model to explore this more. The left plot shows the relative costs of evaluating each model using the ACVMF sampling strategy. Compare this to the MLMC sample allocation. Also edit above code to plot the MFMC sample allocation.

.. GENERATED FROM PYTHON SOURCE LINES 366-367

Before this tutorial ends it is worth noting that a section of the MLMC literature explores adaptive methods which do not assume there is a fixed high-fidelity model but rather attempt to balance the estimator variance with the deterministic bias. These methods add a higher-fidelity model, e.g. a finer finite element mesh, when the variance is made smaller than the bias. We will not explore this here, but an example of this is shown in the tutorial on multi-index collocation.

.. GENERATED FROM PYTHON SOURCE LINES 369-374

References
^^^^^^^^^^
.. [GGEJJCP2020] `A generalized approximate control variate framework for multifidelity uncertainty quantification, Journal of Computational Physics, 408:109257, 2020. <https://doi.org/10.1016/j.jcp.2020.109257>`_

.. [BLWLJCP2022] `On the optimization of approximate control variates with parametrically defined estimators, Journal of Computational Physics,451:110882, 2022 <https://doi.org/10.1016/j.jcp.2021.110882>`_


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.577 seconds)


.. _sphx_glr_download_auto_tutorials_multi_fidelity_plot_many_model_approximate_control_variate_monte_carlo.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_many_model_approximate_control_variate_monte_carlo.py <plot_many_model_approximate_control_variate_monte_carlo.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_many_model_approximate_control_variate_monte_carlo.ipynb <plot_many_model_approximate_control_variate_monte_carlo.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
