
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_multifidelity_quadrature.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_multifidelity_quadrature.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_multifidelity_quadrature.py:


Multi-fidelity Quadrature
-------------------------
The following provides an example of how to use multi-fidelity quadrature, e.g. multilevel Monte Carlo, control variates to estimate the mean of a high-fidelity model from an ensemble of related models of varying cost and accuracy. A set of detailed tutorials on this subject can be found in the tutorials section, e.g. :ref:`sphx_glr_auto_tutorials_multi_fidelity_plot_monte_carlo.py`.

.. GENERATED FROM PYTHON SOURCE LINES 7-8

Load the necessary modules

.. GENERATED FROM PYTHON SOURCE LINES 8-15

.. code-block:: default

    import numpy as np
    from pyapprox.benchmarks.benchmarks import setup_benchmark
    from pyapprox import multifidelity
    from pyapprox import interface
    # set seed for reproducibility
    np.random.seed(1)








.. GENERATED FROM PYTHON SOURCE LINES 16-17

First define an ensemble of models using :py:class:`~pyapprox.benchmarks.setup_benchmark`, see  :mod:`pyapprox.benchmarks`.

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: default

    benchmark = setup_benchmark(
        "tunable_model_ensemble", theta1=np.pi/2*.95, shifts=[.1, .2])
    model_ensemble = interface.ModelEnsemble(benchmark.fun.models)
    hf_mean = benchmark.means[0]








.. GENERATED FROM PYTHON SOURCE LINES 23-24

Initialize a multifidelity estimator. This requires an estimate of the covariance between the models and the model costs and the random variable representing the model inputs

.. GENERATED FROM PYTHON SOURCE LINES 24-37

.. code-block:: default


    # generate pilot samples to estimate correlation
    npilot_samples = int(1e2)
    # The models are trivial to evaluate so make up model costs
    model_costs = 10.**(-np.arange(3))

    est_name = "mlblue"
    cov = multifidelity.estimate_model_ensemble_covariance(
        npilot_samples, benchmark.variable.rvs, model_ensemble,
        model_ensemble.nmodels)[0]
    est = multifidelity.get_estimator(
        est_name, cov, model_costs, benchmark.variable)








.. GENERATED FROM PYTHON SOURCE LINES 38-39

Define a target cost and determine the optimal number of samples to allocate to each model

.. GENERATED FROM PYTHON SOURCE LINES 39-49

.. code-block:: default

    target_cost = 1000
    est.allocate_samples(target_cost)
    args = [benchmark.variable] if est_name == "mlblue" else []
    data = est.generate_data(model_ensemble.functions, *args)
    values = data if est_name == "mlblue" else data[1]
    mf_mean = est(values)

    print("Multi-fidelity mean", mf_mean)
    print("Exact high-fidelity mean", hf_mean)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Multi-fidelity mean [[-0.0060008]]
    Exact high-fidelity mean 0.0




.. GENERATED FROM PYTHON SOURCE LINES 50-59

Excercises
^^^^^^^^^^
Compare the multi-fidelity mean to the single-fidelity means using only one model

Increase the target cost

Change the correlation between the models by varying the theta1 argument to setup benchmarks

Change the estimator. Names of the available estimators can be printed via

.. GENERATED FROM PYTHON SOURCE LINES 59-61

.. code-block:: default


    print(multifidelity.monte_carlo_estimators.monte_carlo_estimators.keys())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    dict_keys(['acvmf', 'acvis', 'mfmc', 'mlmc', 'acvgmf', 'acvgmfb', 'mc', 'mlblue'])





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.006 seconds)


.. _sphx_glr_download_auto_examples_plot_multifidelity_quadrature.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_multifidelity_quadrature.py <plot_multifidelity_quadrature.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_multifidelity_quadrature.ipynb <plot_multifidelity_quadrature.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
